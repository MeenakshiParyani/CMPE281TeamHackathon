{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "AWS Cloudformation Template for Go Starbucks(-like) REST API with MongoDB backend.",

  "Parameters" : {
    "ImageId": {
      "Description": "AWS Image id",
      "Default": "ami-7a85a01a",
      "Type": "AWS::EC2::Image::Id"
    },

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DockerImage": {
      "Description": "DockerHub Image",
      "Type": "String",
      "Default": "ttpham0111/go-restbucks"
    }
  },

  "Resources": {
    "MongoReplica1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "SecurityGroups": [{"Ref": "MongoSecurityGroup"}],
        "KeyName": {"Ref": "KeyName"},
        "ImageId": {"Ref": "ImageId"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MongoReplica1 ",
             "         --configsets Install ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MongoReplica1 ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      },

      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Docker and start Mongo.",

        "AWS::CloudFormation::Init" : {
          "configSets": {
            "Install": ["docker", "mongo"]
          },
          "docker": {
            "packages" : {
              "yum" : {
                "docker": []
              }
            },
            "services": {
              "sysvinit": {  
                "docker": {
                  "enabled": true,
                  "ensureRunning": true
                }
              }
            }
          },
          "mongo": {
            "files" : {
              "/etc/init.d/mongo": {
                "content" : {"Fn::Join": ["", [
                  "#!/bin/bash", "\n",
                  "# chkconfig: 2345 20 80", "\n",
                  "", "\n",
                  "# Source function library.", "\n",
                  ". /etc/init.d/functions", "\n",
                  "\n",
                  "start() {", "\n",
                  "    docker rm -f mongo", "\n",
                  "    docker run --name mongo -p 27017:27017 -d mongo --replSet rs0", "\n",
                  "}", "\n",
                  "\n",
                  "stop() {", "\n",
                  "    docker rm -f mongo ", "\n",
                  "}", "\n",
                  "\n",
                  "case \"$1\" in ", "\n",
                  "    start)", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    stop)", "\n",
                  "       stop", "\n",
                  "       ;;", "\n",
                  "    restart)", "\n",
                  "       stop", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    *)", "\n",
                  "       echo \"Usage: $0 {start|stop|restart}\"", "\n",
                  "esac", "\n",
                  "\n",
                  "exit 0", "\n",
                  "\n"
                ]]},
                "mode"  : "000751",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services": {
              "sysvinit": {  
                "mongo": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": ["/etc/init.d/mongo"]
                }
              }
            }
          }
        }
      }
    },

    "MongoReplica2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "SecurityGroups": [{"Ref": "MongoSecurityGroup"}],
        "KeyName": {"Ref": "KeyName"},
        "ImageId": {"Ref": "ImageId"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MongoReplica2 ",
             "         --configsets Install ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MongoReplica2 ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      },

      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Docker and start Mongo.",

        "AWS::CloudFormation::Init" : {
          "configSets": {
            "Install": ["docker", "mongo"]
          },
          "docker": {
            "packages" : {
              "yum" : {
                "docker": []
              }
            },
            "services": {
              "sysvinit": {  
                "docker": {
                  "enabled": true,
                  "ensureRunning": true
                }
              }
            }
          },
          "mongo": {
            "files" : {
              "/etc/init.d/mongo": {
                "content" : {"Fn::Join": ["", [
                  "#!/bin/bash", "\n",
                  "# chkconfig: 2345 20 80", "\n",
                  "", "\n",
                  "# Source function library.", "\n",
                  ". /etc/init.d/functions", "\n",
                  "\n",
                  "start() {", "\n",
                  "    docker rm -f mongo", "\n",
                  "    docker run --name mongo -p 27017:27017 -d mongo --replSet rs0", "\n",
                  "}", "\n",
                  "\n",
                  "stop() {", "\n",
                  "    docker rm -f mongo ", "\n",
                  "}", "\n",
                  "\n",
                  "case \"$1\" in ", "\n",
                  "    start)", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    stop)", "\n",
                  "       stop", "\n",
                  "       ;;", "\n",
                  "    restart)", "\n",
                  "       stop", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    *)", "\n",
                  "       echo \"Usage: $0 {start|stop|restart}\"", "\n",
                  "esac", "\n",
                  "\n",
                  "exit 0", "\n",
                  "\n"
                ]]},
                "mode"  : "000751",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services": {
              "sysvinit": {  
                "mongo": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": ["/etc/init.d/mongo"]
                }
              }
            }
          }
        }
      }
    },

    "MongoPrimary": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "SecurityGroups": [{"Ref": "MongoSecurityGroup"}],
        "KeyName": {"Ref": "KeyName"},
        "ImageId": {"Ref": "ImageId"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MongoPrimary ",
             "         --configsets Install ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource MongoPrimary ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      },

      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Docker and start Mongo.",

        "AWS::CloudFormation::Init" : {
          "configSets": {
            "Install": ["docker", "mongo"]
          },
          "docker": {
            "packages" : {
              "yum" : {
                "docker": []
              }
            },
            "services": {
              "sysvinit": {  
                "docker": {
                  "enabled": true,
                  "ensureRunning": true
                }
              }
            }
          },
          "mongo": {
            "files" : {
              "/etc/init.d/mongo": {
                "content" : {"Fn::Join": ["", [
                  "#!/bin/bash", "\n",
                  "# chkconfig: 2345 20 80", "\n",
                  "", "\n",
                  "# Source function library.", "\n",
                  ". /etc/init.d/functions", "\n",
                  "\n",
                  "start() {", "\n",
                  "    docker rm -f mongo", "\n",
                  "    docker run --name mongo -p 27017:27017 -d mongo --replSet rs0", "\n",
                  "    docker exec -it mongo mongo --eval \"rs.initiate({",
                  "      _id: \"rs0\",",
                  "      members: [",
                  "        { _id: 0, host: \"", { "Fn::GetAtt" : [ "MongoPrimary", "PublicDnsName" ] }, ":27017\" },",
                  "        { _id: 1, host: \"", { "Fn::GetAtt" : [ "MongoReplica1", "PublicDnsName" ] }, ":27017\" },",
                  "        { _id: 2, host: \"", { "Fn::GetAtt" : [ "MongoReplica2", "PublicDnsName" ] }, ":27017\" }",
                  "      ]",
                  "    })\"", "\n",
                  "}", "\n",
                  "\n",
                  "stop() {", "\n",
                  "    docker rm -f mongo ", "\n",
                  "}", "\n",
                  "\n",
                  "case \"$1\" in ", "\n",
                  "    start)", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    stop)", "\n",
                  "       stop", "\n",
                  "       ;;", "\n",
                  "    restart)", "\n",
                  "       stop", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    *)", "\n",
                  "       echo \"Usage: $0 {start|stop|restart}\"", "\n",
                  "esac", "\n",
                  "\n",
                  "exit 0", "\n",
                  "\n"
                ]]},
                "mode"  : "000751",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services": {
              "sysvinit": {  
                "mongo": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": ["/etc/init.d/mongo"]
                }
              }
            }
          }
        }
      }
    },

    "MongoSecurityGroup" : {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22. Open HTTP/s on all. Open mongodb port to all.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Ref": "SSHLocation"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "MongoSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupName" : { "Ref" : "MongoSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "27017",
        "ToPort" : "27017",
        "SourceSecurityGroupName" : { "Ref" : "MongoSecurityGroup" }
      }
    },

    "APIEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref" : "InstanceType"},
        "SecurityGroups": [{"Ref": "APIInstanceSecurityGroup"}],
        "KeyName": {"Ref": "KeyName"},
        "ImageId": {"Ref": "ImageId"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update aws-cfn-bootstrap\n",

             "# Install the files and packages from the metadata\n",
             "/opt/aws/bin/cfn-init ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource APIEC2Instance ",
             "         --configsets Install ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "# Signal the status from cfn-init\n",
             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource APIEC2Instance ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      },

      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT5M"
        }
      },

      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Docker and Start API.",

        "AWS::CloudFormation::Init" : {
          "configSets": {
            "Install": ["docker", "app"]
          },
          "docker": {
            "packages" : {
              "yum" : {
                "docker": []
              }
            },
            "services": {
              "sysvinit": {  
                "docker": {
                  "enabled": true,
                  "ensureRunning": true
                }
              }
            }
          },
          "app": {
            "files" : {
              "/etc/init.d/gorest": {
                "content" : {"Fn::Join": ["", [
                  "#!/bin/bash", "\n",
                  "# chkconfig: 2345 20 80", "\n",
                  "", "\n",
                  "# Source function library.", "\n",
                  ". /etc/init.d/functions", "\n",
                  "\n",
                  "start() {", "\n",
                  "    docker rm -f gorest", "\n",
                  "    docker pull ", {"Ref": "DockerImage"}, "\n",
                  "    docker run --name gorest",
                  "               -p 80:5000",
                  "               -d",
                  "               -e DB_URL=\"mongodb://", { "Fn::GetAtt" : [ "MongoPrimary", "PublicDnsName" ] }, ":27017,",
                                                           { "Fn::GetAtt" : [ "MongoReplica1", "PublicDnsName" ] }, ":27017,",
                                                           { "Fn::GetAtt" : [ "MongoReplica2", "PublicDnsName" ] }, ":27017/cmpe281?replicaSet=rs0", "\"",
                  "               ", {"Ref": "DockerImage"}, "\n",
                  "}", "\n",
                  "\n",
                  "stop() {", "\n",
                  "    docker rm -f gorest ", "\n",
                  "}", "\n",
                  "\n",
                  "case \"$1\" in ", "\n",
                  "    start)", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    stop)", "\n",
                  "       stop", "\n",
                  "       ;;", "\n",
                  "    restart)", "\n",
                  "       stop", "\n",
                  "       start", "\n",
                  "       ;;", "\n",
                  "    *)", "\n",
                  "       echo \"Usage: $0 {start|stop|restart}\"", "\n",
                  "esac", "\n",
                  "\n",
                  "exit 0", "\n",
                  "\n"
                ]]},
                "mode"  : "000751",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services": {
              "sysvinit": {  
                "gorest": {
                  "enabled": true,
                  "ensureRunning": true,
                  "files": ["/etc/init.d/gorest"]
                }
              }
            }
          }
        }
      }
    },
    "APIInstanceSecurityGroup" : {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22. Open HTTP/s on all.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {"Ref": "SSHLocation"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  },

  "Outputs": {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : { "Ref" : "APIEC2Instance" }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "APIEC2Instance", "AvailabilityZone" ] }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "APIEC2Instance", "PublicDnsName" ] }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : { "Fn::GetAtt" : [ "APIEC2Instance", "PublicIp" ] }
    },
    "MongoInstance1PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance running mongo",
      "Value": { "Fn::GetAtt" : [ "MongoPrimary", "PublicDnsName" ] }
    },
    "MongoInstance2PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance running mongo",
      "Value": { "Fn::GetAtt" : [ "MongoReplica1", "PublicDnsName" ] }
    },
    "MongoInstance3PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance running mongo",
      "Value": { "Fn::GetAtt" : [ "MongoReplica2", "PublicDnsName" ] }
    }
  }
}